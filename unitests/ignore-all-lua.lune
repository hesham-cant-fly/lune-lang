-- A File to test backward compatibility with lua

--[[
    Comprehensive Lua Syntax Example
    This script demonstrates most Lua features and syntax elements
--]]

-- 1. Basic syntax and comments
-- Single line comment

--[[
    Multi-line comment
    Another line
--]]

-- 2. Variables and data types
local nilValue = nil                -- nil type
local booleanValue = true           -- boolean
local numberValue = 42              -- number (all numbers are floats in Lua)
local stringValue = "Hello, Lua!"   -- string
local anotherString = 'single quotes' -- also string
local multilineString = [[
    Multi-line string
    Second line
]]

-- 3. Tables (Lua's sole data structure)
local emptyTable = {}                -- empty table
local arrayLike = {10, 20, 30}      -- array-like table (index starts at 1)
local dictLike = {                  -- dictionary-like table
    name = "Lua",
    version = 5.4,
    isCool = true
}
local mixedTable = {                -- mixed table
    "apple", "banana",              -- array part
    color = "red",                  -- dictionary part
    count = 3,
    nested = {                      -- nested table
        key = "value"
    }
}

-- 4. Operators
local a, b = 10, 3
local sum = a + b                   -- arithmetic: + - * / % ^ //
local concat = "Hello" .. " " .. "World" -- string concatenation
local isEqual = (a == b)            -- comparison: == ~= < > <= >=
local logical = (true and false) or (not true) -- logical: and, or, not

-- 5. Control structures
-- If statement
if a > b then
    print("a is greater than b")
elseif a < b then
    print("a is less than b")
else
    print("a equals b")
end

-- While loop
local i = 1
while i <= 5 do
    print("While loop iteration:", i)
    i = i + 1
end

-- Repeat loop (like do-while)
local j = 1
repeat
    print("Repeat loop iteration:", j)
    j = j + 1
until j > 5

-- Numeric for loop
for k = 1, 10, 2 do  -- start, end, step
    print("Numeric for:", k)
end

-- Generic for loop with pairs
for key, value in pairs(dictLike) do
    print("Key:", key, "Value:", value)
end

-- Generic for loop with ipairs (for array-like tables)
for index, value in ipairs(arrayLike) do
    print("Index:", index, "Value:", value)
end

-- 6. Functions
-- Basic function
function greet(name)
    return "Hello, " .. (name or "anonymous")
end

-- Variable number of arguments
function sumAll(...)
    local args = {...}
    local total = 0
    for i, v in ipairs(args) do
        total = total + v
    end
    return total
end

-- Function as variable
local multiply = function(a, b)
    return a * b
end

-- Closures
function makeCounter()
    local count = 0
    return function()
        count = count + 1
        return count
    end
end

local counter = makeCounter()
print(counter()) -- 1
print(counter()) -- 2

-- 7. Metatables and metamethods
local t1 = {x = 10}
local t2 = {y = 20}
local mt = {
    __add = function(a, b)  -- metamethod for + operator
        return {x = a.x + b.y}
    end,
    __tostring = function(t) -- metamethod for tostring
        return "Table(x=" .. tostring(t.x) .. ")"
    end
}
setmetatable(t1, mt)
setmetatable(t2, mt)

local t3 = t1 + t2
print(tostring(t3)) -- uses __tostring metamethod

-- 8. Coroutines
local co = coroutine.create(function(a, b)
    print("Coroutine started with", a, b)
    local x = coroutine.yield(a + b)
    print("Coroutine resumed with", x)
    return x * 2
end)

local ok, result = coroutine.resume(co, 10, 20)
print("First yield:", result)
ok, result = coroutine.resume(co, result * 2)
print("Final result:", result)

-- 9. Error handling
local status, err = pcall(function()
    error("Something went wrong!")
end)
if not status then
    print("Caught error:", err)
end

-- 10. Modules
-- (Typically in separate file, but shown here for completeness)
local mymodule = {}
function mymodule.sayHello()
    print("Hello from module!")
end
return mymodule

-- 11. Bitwise operations (Lua 5.3+)
local bit32 = require("bit32")  -- Lua 5.2
local x, y = 0xF0, 0x0F
local band = x & y              -- bitwise AND (Lua 5.3+)
local bor = x | y               -- bitwise OR
local bxor = x ~ y              -- bitwise XOR
local bnot = ~x                 -- bitwise NOT
local shift = x >> 4            -- right shift

-- 12. Garbage collection
collectgarbage("collect")       -- run garbage collector

-- 13. Environment variables
print(_VERSION)                 -- Lua version
print(_G._VERSION)              -- same as above (_G is global table)

-- 14. Table manipulation
table.insert(arrayLike, 40)     -- insert at end
table.insert(arrayLike, 2, 15)  -- insert at position
table.remove(arrayLike, 3)      -- remove element
local sorted = table.sort(arrayLike) -- sort in place

-- 15. String manipulation
local s = "Lua is awesome"
print(string.sub(s, 5, 6))      -- substring
print(string.find(s, "is"))     -- find pattern
print(string.gsub(s, "a", "A")) -- global substitution
print(string.match(s, "%a+"))   -- pattern matching

-- 16. Math library
print(math.pi)                  -- constants
print(math.sin(math.pi/2))      -- trig functions
print(math.floor(3.7))          -- rounding
print(math.random(1, 100))      -- random numbers

-- 17. I/O operations
-- File reading
local file = io.open("test.txt", "r")
if file then
    local content = file:read("*a")
    file:close()
    print("File content:", content)
else
    print("Could not open file")
end

-- File writing
file = io.open("output.txt", "w")
file:write("This is a test\n")
file:close()

-- 18. OOP in Lua (prototype-based)
local Person = {
    name = "Unknown",
    age = 0
}

function Person:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function Person:greet()
    return "Hello, my name is " .. self.name
end

local john = Person:new({name = "John", age = 30})
print(john:greet())

-- 19. Debug library
print(debug.traceback())        -- print stack trace

-- 20. Weak tables
local weakKeys = setmetatable({}, {__mode = "k"})
local weakValues = setmetatable({}, {__mode = "v"})
local weakBoth = setmetatable({}, {__mode = "kv"})

print("This script demonstrates most Lua syntax features!")
