const std = @import("std");
const mem = std.mem;
const Allocator = mem.Allocator;

/// This AST is assumed to be type safe
/// since it is generated by the analyzer.
pub const Program = struct {
    // functions: []const Function,
    body: std.ArrayList(Stmt),

    pub fn deinit(self: Program, allocator: Allocator) void {
        for (self.body.items) |body| {
            body.deinit(allocator);
        }
        self.body.deinit();
    }
};

pub const Stmt = union(enum) {
    Expr: Expr,
    Var: struct {
        name: []const u8,
        value: ?Expr,
    },
    Const: struct {
        name: []const u8,
        value: ?Expr,
    },

    pub fn create(allocator: Allocator, value: Stmt) Allocator.Error!Stmt {
        const result = try allocator.create(Stmt);
        result.* = value;
        return result;
    }

    pub fn deinit(self: Stmt, allocator: Allocator) void {
        switch (self) {
            .Expr => |expr| expr.deinit(allocator),
            .Var => |vr| {
                if (vr.value) |value| {
                    value.deinit(allocator);
                }
            },
            .Const => |con| {
                if (con.value) |value| {
                    value.deinit(allocator);
                }
            },
        }
    }
};

pub const Expr = union(enum) {
    Binary: struct {
        left: *const Expr,
        op: []const u8,
        right: *const Expr,
    },
    Unary: struct {
        op: []const u8,
        right: *const Expr,
    },
    Constant: []const u8,

    pub fn create(allocator: Allocator, value: Expr) Allocator.Error!*Expr {
        const result = try allocator.create(Expr);
        result.* = value;
        return result;
    }

    pub fn deinit(self: Expr, allocator: Allocator) void {
        switch (self) {
            .Binary => |bin| {
                bin.left.deinit(allocator);
                bin.right.deinit(allocator);

                allocator.destroy(bin.left);
                allocator.destroy(bin.right);
            },
            .Unary => |un| {
                un.right.deinit(allocator);

                allocator.destroy(un.right);
            },
            .Constant => {},
        }
    }
};

pub const Function = struct {
    name: []const u8,
    args: []const Arg,
    body: []const Stmt,
    is_local: bool,

    const Arg = struct {
        name: []const u8,
    };
};
